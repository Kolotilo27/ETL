/// @file exception
/// @data 16/04/2014 19:24:53
/// @author Ambroise Leclerc
/// @brief Standard exceptions definitions.
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include <libstd/include/exception>
#include <libstd/include/string>

namespace ETLSTD {

class logic_error : public exception {
public:
    logic_error() = default;
    explicit logic_error(const char*) : exception() {}
    explicit logic_error(const string&) : exception() {}
};

class domain_error : public logic_error {
public:
    domain_error() = default;
    explicit domain_error(const char* what_arg) : logic_error(what_arg) {}
    explicit domain_error(const string& what_arg) : logic_error(what_arg) {}
};

class invalid_argument : public logic_error {
public:
    invalid_argument() = default;
    explicit invalid_argument(const char* what_arg) : logic_error(what_arg) {}
    explicit invalid_argument(const string& what_arg) : logic_error(what_arg) {}
};

class length_error : public logic_error {
public:
    length_error() = default;
    explicit length_error(const char* what_arg) : logic_error(what_arg) {}
    explicit length_error(const string& what_arg) : logic_error(what_arg) {}
};

class out_of_range : public logic_error {
public:
    out_of_range() = default;
    explicit out_of_range(const char* what_arg) : logic_error(what_arg) {}
    explicit out_of_range(const string& what_arg) : logic_error(what_arg) {}
};

class runtime_error : public exception {
public:
    runtime_error() = default;
    explicit runtime_error(const char*) : exception() {}
    explicit runtime_error(const string&) : exception() {}

};

class range_error : public runtime_error {
public:
    range_error() = default;
    explicit range_error(const char* what_arg) : runtime_error(what_arg) {}
    explicit range_error(const string& what_arg) : runtime_error(what_arg) {}
};


class overflow_error : public runtime_error {
public:
    overflow_error() = default;
    explicit overflow_error(const char* what_arg) : runtime_error(what_arg) {}
    explicit overflow_error(const string& what_arg) : runtime_error(what_arg) {}
};

class underflow_error : public runtime_error {
public:
    underflow_error() = default;
    explicit underflow_error(const char* what_arg) : runtime_error(what_arg) {}
    explicit underflow_error(const string& what_arg) : runtime_error(what_arg) {}
};

} // namespace ETLSTD
